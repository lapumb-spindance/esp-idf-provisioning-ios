// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: custom-config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum CustomConfigStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case success // = 0
  case invalidSecScheme // = 1
  case invalidProto // = 2
  case tooManySessions // = 3
  case invalidArgument // = 4
  case internalError // = 5
  case cryptoError // = 6
  case invalidSession // = 7
  case UNRECOGNIZED(Int)

  init() {
    self = .success
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .success
    case 1: self = .invalidSecScheme
    case 2: self = .invalidProto
    case 3: self = .tooManySessions
    case 4: self = .invalidArgument
    case 5: self = .internalError
    case 6: self = .cryptoError
    case 7: self = .invalidSession
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .success: return 0
    case .invalidSecScheme: return 1
    case .invalidProto: return 2
    case .tooManySessions: return 3
    case .invalidArgument: return 4
    case .internalError: return 5
    case .cryptoError: return 6
    case .invalidSession: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension CustomConfigStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [CustomConfigStatus] = [
    .success,
    .invalidSecScheme,
    .invalidProto,
    .tooManySessions,
    .invalidArgument,
    .internalError,
    .cryptoError,
    .invalidSession,
  ]
}

#endif  // swift(>=4.2)

struct CustomConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var configKey: UInt32 = 0

  var strData: String = String()

  var intData: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CustomConfigResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: CustomConfigStatus = .success

  var respStr: String = String()

  var errCode: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CustomConfigStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Success"),
    1: .same(proto: "InvalidSecScheme"),
    2: .same(proto: "InvalidProto"),
    3: .same(proto: "TooManySessions"),
    4: .same(proto: "InvalidArgument"),
    5: .same(proto: "InternalError"),
    6: .same(proto: "CryptoError"),
    7: .same(proto: "InvalidSession"),
  ]
}

extension CustomConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CustomConfigRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "config_key"),
    2: .standard(proto: "str_data"),
    3: .standard(proto: "int_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.configKey)
      case 2: try decoder.decodeSingularStringField(value: &self.strData)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.intData)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.configKey != 0 {
      try visitor.visitSingularUInt32Field(value: self.configKey, fieldNumber: 1)
    }
    if !self.strData.isEmpty {
      try visitor.visitSingularStringField(value: self.strData, fieldNumber: 2)
    }
    if self.intData != 0 {
      try visitor.visitSingularUInt32Field(value: self.intData, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CustomConfigRequest, rhs: CustomConfigRequest) -> Bool {
    if lhs.configKey != rhs.configKey {return false}
    if lhs.strData != rhs.strData {return false}
    if lhs.intData != rhs.intData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CustomConfigResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CustomConfigResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "resp_str"),
    3: .standard(proto: "err_code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      case 2: try decoder.decodeSingularStringField(value: &self.respStr)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.errCode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .success {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if !self.respStr.isEmpty {
      try visitor.visitSingularStringField(value: self.respStr, fieldNumber: 2)
    }
    if self.errCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.errCode, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CustomConfigResponse, rhs: CustomConfigResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.respStr != rhs.respStr {return false}
    if lhs.errCode != rhs.errCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
